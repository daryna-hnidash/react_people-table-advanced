{"version":3,"sources":["App.tsx","components/HomePage/HomePage.tsx","components/NotFoundPage/NotFoundPage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","api.ts","components/PeoplePage/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["App","className","role","isActive","classNames","to","HomePage","NotFoundPage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","SexFilter","centuriesArr","PeopleFilters","setSearchParams","queryParam","get","centuriesParam","getAll","sexParam","toggleCentury","century","includes","filter","cent","sex","male","female","type","placeholder","onChange","e","query","target","map","centuries","href","Loader","PersonLink","person","slug","name","PeopleTable","people","useParams","sort","sortChangeHandler","param","order","getSortIconClass","sortParam","has","visiblePeople","newPeople","toLowerCase","motherName","fatherName","String","Math","ceil","born","a","b","localeCompare","sorting","length","mother","find","currPerson","father","died","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","loadingError","setLoadingError","isLoading","setIsLoading","useEffect","getPeople","catch","finally","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.fe16fe71.chunk.js","sourcesContent":["import { NavLink, Outlet } from 'react-router-dom';\nimport classNames from 'classnames';\nimport './App.scss';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }) => (\n              classNames(\n                'navbar-item',\n                { 'has-background-grey-lighter': isActive },\n              )\n            )}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={({ isActive }) => (\n              classNames(\n                'navbar-item',\n                { 'has-background-grey-lighter': isActive },\n              )\n            )}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n\n        <Outlet />\n\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\n\nenum SexFilter {\n  male = 'm',\n  female = 'f',\n}\n\nconst centuriesArr: string[] = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryParam = searchParams.get('query') || '';\n  const centuriesParam = searchParams.getAll('centuries') || [];\n  const sexParam = searchParams.get('sex');\n\n  const queryChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const params = getSearchWith(\n      searchParams, { query: e.target.value ? e.target.value : null },\n    );\n\n    setSearchParams(params);\n  };\n\n  const toggleCentury = (century: string) => {\n    const newCenturiesParam = centuriesParam.includes(century)\n      ? centuriesParam.filter(cent => cent !== century)\n      : [...centuriesParam, century];\n\n    return newCenturiesParam;\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({\n            'is-active': sexParam === null,\n          })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({\n            'is-active': sexParam === SexFilter.male,\n          })}\n          params={{ sex: SexFilter.male }}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({\n            'is-active': sexParam === SexFilter.female,\n          })}\n          params={{ sex: SexFilter.female }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={queryParam}\n            onChange={queryChangeHandler}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesArr.map((century) => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames(\n                  'button mr-1',\n                  { 'is-info': centuriesParam.includes(century) },\n                )}\n                params={{ centuries: toggleCentury(century) }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <a\n          className=\"button is-link is-outlined is-fullwidth\"\n          href=\"#/people\"\n        >\n          Reset all filters\n        </a>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { NavLink, useSearchParams } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <NavLink\n      to={`/people/${person.slug}?${searchParams.toString()}`}\n      className={classNames(\n        { 'has-text-danger': person.sex === 'f' },\n      )}\n    >\n      {person.name}\n    </NavLink>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\nimport { SearchLink } from '../SearchLink';\n\ntype Props = {\n  people: Person[]\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug } = useParams();\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get('sort') || '';\n  const queryParam = searchParams.get('query') || '';\n  const centuriesParam = searchParams.getAll('centuries') || [];\n  const sexParam = searchParams.get('sex');\n\n  const sortChangeHandler = (param: string) => {\n    if (searchParams.toString().includes(param)\n      && searchParams.toString().includes('desc')) {\n      return {\n        sort: null,\n        order: null,\n      };\n    }\n\n    if (searchParams.toString().includes(param)) {\n      return {\n        sort: param,\n        order: 'desc',\n      };\n    }\n\n    return {\n      sort: param,\n      order: null,\n    };\n  };\n\n  const sorting = () => {\n    let newPeople = [...people];\n\n    if (searchParams.has('query')) {\n      newPeople = newPeople.filter(\n        person => person.name.toLowerCase().includes(queryParam.toLowerCase())\n        || person.motherName?.toLowerCase().includes(queryParam.toLowerCase())\n        || person.fatherName?.toLowerCase().includes(queryParam.toLowerCase()),\n      );\n    }\n\n    if (searchParams.has('centuries')) {\n      newPeople = newPeople.filter(person => centuriesParam\n        .includes(String(Math.ceil(person.born / 100))));\n    }\n\n    if (searchParams.has('sex')) {\n      newPeople = newPeople.filter(person => person.sex === sexParam);\n    }\n\n    switch (sort) {\n      case 'name':\n      case 'sex':\n        if (searchParams.has('order')) {\n          newPeople.sort((a, b) => b[sort].localeCompare(a[sort]));\n        } else {\n          newPeople.sort((a, b) => a[sort].localeCompare(b[sort]));\n        }\n\n        break;\n\n      case 'born':\n      case 'died':\n        if (searchParams.has('order')) {\n          newPeople.sort((a, b) => b[sort] - a[sort]);\n        } else {\n          newPeople.sort((a, b) => a[sort] - b[sort]);\n        }\n\n        break;\n      default:\n    }\n\n    return newPeople;\n  };\n\n  const getSortIconClass = (sortParam: string) => {\n    return classNames(\n      'fas',\n      {\n        'fa-sort-down': sort === sortParam\n      && searchParams.has('order'),\n      },\n      { 'fa-sort': sort !== sortParam },\n      {\n        'fa-sort-up': sort === sortParam\n          && !searchParams.has('order'),\n      },\n    );\n  };\n\n  const visiblePeople = sorting();\n\n  return (\n    <>\n      {!visiblePeople.length\n        ? <p>There are no people matching the current search criteria</p>\n        : (\n          <table\n            data-cy=\"peopleTable\"\n            className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n          >\n            <thead>\n              <tr>\n                <th>\n                  <span className=\"is-flex is-flex-wrap-nowrap\">\n                    Name\n                    <SearchLink\n                      params={sortChangeHandler('name')}\n                    >\n                      <span className=\"icon\">\n                        <i className={getSortIconClass('name')} />\n                      </span>\n                    </SearchLink>\n                  </span>\n                </th>\n\n                <th>\n                  <span className=\"is-flex is-flex-wrap-nowrap\">\n                    Sex\n                    <SearchLink\n                      params={sortChangeHandler('sex')}\n                    >\n                      <span className=\"icon\">\n                        <i className={getSortIconClass('sex')} />\n                      </span>\n                    </SearchLink>\n                  </span>\n                </th>\n\n                <th>\n                  <span className=\"is-flex is-flex-wrap-nowrap\">\n                    Born\n                    <SearchLink\n                      params={sortChangeHandler('born')}\n                    >\n                      <span className=\"icon\">\n                        <i className={getSortIconClass('born')} />\n                      </span>\n                    </SearchLink>\n                  </span>\n                </th>\n\n                <th>\n                  <span className=\"is-flex is-flex-wrap-nowrap\">\n                    Died\n                    <SearchLink\n                      params={sortChangeHandler('died')}\n                    >\n                      <span className=\"icon\">\n                        <i className={getSortIconClass('died')} />\n                      </span>\n                    </SearchLink>\n                  </span>\n                </th>\n\n                <th>Mother</th>\n                <th>Father</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visiblePeople.map(person => {\n                const mother = people\n                  .find(currPerson => currPerson.name === person.motherName);\n                const father = people\n                  .find(currPerson => currPerson.name === person.fatherName);\n\n                return (\n                  <tr\n                    data-cy=\"person\"\n                    key={person.slug}\n                    className={classNames(\n                      { 'has-background-warning': person.slug === slug },\n                    )}\n                  >\n                    <td>\n                      <PersonLink person={person} />\n                    </td>\n\n                    <td>{person.sex}</td>\n                    <td>{person.born}</td>\n                    <td>{person.died}</td>\n                    {mother\n                      ? <td><PersonLink person={mother} /></td>\n                      : <td>{person.motherName ? person.motherName : '-'}</td>}\n                    {father\n                      ? <td><PersonLink person={father} /></td>\n                      : <td>{person.fatherName ? person.fatherName : '-'}</td>}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { PeopleFilters } from '../PeopleFilters';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable/PeopleTable';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [loadingError, setLoadingError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(setPeople)\n      .catch(() => setLoadingError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {loadingError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {!isLoading && !people.length && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!isLoading && (\n                <PeopleTable people={people} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  HashRouter as Router, Navigate, Route, Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\" element={<PeoplePage />}>\n          <Route path=\":slug\" element={<PeoplePage />} />\n        </Route>\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}